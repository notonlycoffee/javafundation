1.类要成为线程安全的，首先必须在单线程环境中有正确的行为

2.一种方法的结果作为另一种方法的输入条件，就是状态依赖,在线程安全中就必须保证至少
	在调用这两种方法期间元素的状态没有改变。一般来说，做到这一点的唯一方法就在调用
	第一个方法之前是独占性地锁定对象，一直到调用了后一种方法以后。

3.五类线程安全性的分类方法：不可变，线程安全，有条件线程安全，线程兼容，线程对立；
	这种分类的核心是调用者是否可以或者必须用外部同步包围操作
		3.1不可变对象：不可变对象一定是线程安全的，并且永远不需要额外的同步，比如Integer，String和BigInteger都是不可变的
		
		3.2线程安全：不管运行环境如何排列，线程都不需要任何额外的同步，这种线程安全性保证是很严格的，很少有类可以实现这样的效果
		
		3.3有条件的线程安全：有条件的线程安全类对于单独的操作是可以线程安全的，但是某些操作序列可能需要外部同步。
			最常见的就是遍历HashTable迭代器的时候修改迭代对象的结构就会抛出concurrentmodifyexception异常
			
		3.4线程兼容：线程兼容类不是线程安全的，但是可以通过正确使用同步而在并发环境中安全地使用。方法是用一个
			synchronized快包围一个方法调用或者创建一个包装器对象。常见的线程兼容类有：ArrayList和HashMap等
			
		3.5线程对立：线程对立类是那些不管是否调用了外部同步都不能在并发使用时安全地呈现的类。线程对立很少见,
			当类修改静态数据，而静态数据会影响在其他线程中执行的其他类的行为，这是通常会出现线程对立

4.